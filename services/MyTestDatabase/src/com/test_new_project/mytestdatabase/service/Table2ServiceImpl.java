/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.test_new_project.mytestdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.test_new_project.mytestdatabase.Table1;
import com.test_new_project.mytestdatabase.Table2;


/**
 * ServiceImpl object for domain model class Table2.
 *
 * @see Table2
 */
@Service("MyTestDatabase.Table2Service")
public class Table2ServiceImpl implements Table2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table2ServiceImpl.class);

    @Autowired
	@Qualifier("MyTestDatabase.Table1Service")
	private Table1Service table1Service;

    @Autowired
    @Qualifier("MyTestDatabase.Table2Dao")
    private WMGenericDao<Table2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
	public Table2 create(Table2 table2) {
        LOGGER.debug("Creating a new Table2 with information: {}", table2);
        Table2 table2Created = this.wmGenericDao.create(table2);
        if(table2Created.getTable1sForColumn2() != null) {
            for(Table1 table1sForColumn2 : table2Created.getTable1sForColumn2()) {
                table1sForColumn2.setTable2ByColumn2(table2Created);
                LOGGER.debug("Creating a new child Table1 with information: {}", table1sForColumn2);
                table1Service.create(table1sForColumn2);
            }
        }
        return table2Created;
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Table2 getById(Integer table2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table2 by id: {}", table2Id);
        Table2 table2 = this.wmGenericDao.findById(table2Id);
        if (table2 == null){
            LOGGER.debug("No Table2 found with id: {}", table2Id);
            throw new EntityNotFoundException(String.valueOf(table2Id));
        }
        return table2;
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Table2 findById(Integer table2Id) {
        LOGGER.debug("Finding Table2 by id: {}", table2Id);
        return this.wmGenericDao.findById(table2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "MyTestDatabaseTransactionManager")
	@Override
	public Table2 update(Table2 table2) throws EntityNotFoundException {
        LOGGER.debug("Updating Table2 with information: {}", table2);
        this.wmGenericDao.update(table2);

        Integer table2Id = table2.getId();

        return this.wmGenericDao.findById(table2Id);
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
	@Override
	public Table2 delete(Integer table2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table2 with id: {}", table2Id);
        Table2 deleted = this.wmGenericDao.findById(table2Id);
        if (deleted == null) {
            LOGGER.debug("No Table2 found with id: {}", table2Id);
            throw new EntityNotFoundException(String.valueOf(table2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Page<Table2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Table2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service MyTestDatabase for table Table2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Table1> findAssociatedTable1sForColumn2(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated table1sForColumn2");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("table2ByColumn2.id = '" + id + "'");

        return table1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table1Service instance
	 */
	protected void setTable1Service(Table1Service service) {
        this.table1Service = service;
    }

}

